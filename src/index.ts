import { readFile } from "fs/promises";
import path from "path";
import glob from "tiny-glob";
import { factory, Node } from "typescript";
import {
  Driver,
  Session,
  snakeToCamelCaseConversion,
  TypedValues,
  Types,
  withRetries,
} from "ydb-sdk";
import emit from "./emit";
import getImports from "./getImports";
// import getQueryOptions from "./getQueryOptions";
import processFile from "./processFile";

const IMPORTS = [
  TypedValues.name,
  Types.name,
  Driver.name,
  Session.name,
  withRetries.name,
];

export const processFiles = async (
  files: { name: string; content: string }[],
  driver: Driver
) => {
  const comment = factory.createJSDocComment(
    "This file is generated by ydb-ts-codegen and should not be modified directly"
  );
  let result: Node[] = [comment, getImports(IMPORTS, "ydb-sdk")];
  for (const file of files) {
    const processedFile = await processFile(
      snakeToCamelCaseConversion.ydbToJs(file.name),
      file.content,
      driver
    );
    result = result.concat(...processedFile);
  }
  return emit(result);
};

export const processFolder = async (source: string, driver: Driver) => {
  const target = `${source}/**/*.sql`;
  const filenames = await glob(target, {
    absolute: true,
    filesOnly: true,
  });
  const files = await Promise.all(
    filenames.map(async (filename) => ({
      name: path.parse(filename).name,
      content: await readFile(filename, "utf-8"),
    }))
  );
  return processFiles(files, driver);
};
